package iac.grn.infosweb.session;

import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Logger;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;
import org.jboss.seam.log.Log;
import org.jboss.seam.security.Credentials;
import org.jboss.seam.security.Identity;

import iac.cud.authmodule.dataitem.*; 

import javax.faces.context.FacesContext;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.jboss.seam.faces.FacesMessages;
import iac.grn.infosweb.session.navig.LinksMap;

import java.security.Principal;
import java.util.*;

import org.jboss.seam.contexts.Contexts;
import org.jboss.seam.Component;
import org.jboss.seam.ScopeType;

import ru.spb.iac.cud.exceptions.GeneralFailure;
import ru.spb.iac.cud.exceptions.InvalidCredentials;
import ru.spb.iac.cud.items.Attribute;
import ru.spb.iac.cud.items.Role;

/*import org.picketlink.identity.federation.saml.v2.assertion.AttributeType;
import org.picketlink.identity.seam.federation.SeamSamlPrincipal;*/

import iac.cud.authmodule.session.AutzManagerLocal;
import iac.cud.authmodule.session.CUDAuthManagerLocal;
import iac.cud.infosweb.entity.*;
import iac.cud.infosweb.ws.AccessServiceClient;
/**
 * Управляющий бин, ответственный за аутентификацию пользователей и 
 * проверку прав доступа к требуемым ресурсам
 * @author bubnov
 *
 */
@Name("authenticator")
public class Authenticator
{
    @Logger private Log log;

    //@In Identity identity;
    /**
     * Импортируемые сведения с данными пользователя для прохождения 
     * аутентификации 
     */
    @In Credentials credentials;

    /**
     * Менеджер сущностей, обеспечивающий взаимодействие с БД
     */
    @In EntityManager entityManager;

    /**
     * Импортируемая сущности Пользователь 
     * для проверки прав доступа
     */
    @In(required = false,scope=ScopeType.SESSION)
	private AcUser currentUser;

    /**
     * Импортируемая сущность Используемых Ресурсов 
     * для проверки прав доступа
     */
    @In
	LinksMap linksMap;
    
       
   // public boolean access(){
    public boolean access(String pageCode) throws Exception{
    	try{
    		AuthItem ai=(AuthItem)Component.getInstance("authItem", ScopeType.SESSION);
    		return ai.getPageList().containsKey(pageCode);
    	}catch(Exception e){
    	 log.error("authenticator:access:error:"+e);
    		// e.printStackTrace(System.out);
    	  throw e;
    	}
     }
    /**
     * Проверка прав доступа к запрашиваемому ресурсу 
     * на уровне ресурса
     * @param pageCode запрашиваемый ресурс
     * @return предоставить доступ/отказать
     * @throws Exception
     */
    public boolean access_(String pageCode) throws Exception{
    	
    	try{
  //  	 log.info("authenticator:access:pageCode:"+pageCode);
  //  	 log.info("authenticator:access:acApplication:"+linksMap.getAppCode());
  //  	 log.info("authenticator:access:idUser:"+currentUser.getIdUser());
    	 List<AcRole> alist = entityManager.createQuery(
                 "select ar " +
                 "from AcUser au, AcRole ar, AcLinkUserToRoleToRaion aur, " +
                 "AcLinkRoleAppPagePrmssn arp, AcAppPage ap where " +
                 "aur.acRole is not null and aur.acRole.idRol=ar.idRol and " +
                 "aur.acUser is not null and aur.acUser.idUser=au.idUser and " +
                 "arp.acRole is not null and arp.acRole.idRol=ar.idRol and " +
                 "arp.acAppPage is not null and arp.acAppPage.idRes=ap.idRes and " +
                 "ap.pageCode=:pageCode and " +
                 "ap.acApplication=:acApplication and " +
                 "au.idUser=:idUser " )
                 .setParameter("pageCode", pageCode)
                 .setParameter("acApplication", linksMap.getAppCode())
                 .setParameter("idUser", currentUser.getIdUser())
                 .getResultList();
  
    //	 log.info("authenticator:access:isEmpty:"+alist.isEmpty());
     	 if(alist.isEmpty()){
     		return false;
     	 }
    	}catch(Exception e){
    		 log.error("authenticator:access:error"+e);
    		// e.printStackTrace(System.out);
    		 throw e;
    	}
    	return true;
    }
   public boolean accessPerm(String pageCode, String permCode) throws Exception{
	//   log.info("authenticator:accessPerm:01:pageCode:"+pageCode);
	//   log.info("authenticator:accessPerm:01:permCode:"+permCode);
	  try{
   		AuthItem ai=(AuthItem)Component.getInstance("authItem",ScopeType.SESSION);
   		PageItem pi = ai.getPageList().get(pageCode);
   		if(pi==null){
   			return false;
   		}
   	 /*   for(String st: pi.getPermList()){
   	       log.info("authenticator:accessPerm:st"+st);
   	    }*/
   		return pi.getPermList().contains(permCode);
   	  }catch(Exception e){
   	  log.error("authenticator:accessPerm:error"+e);
   		// e.printStackTrace(System.out);
   	  throw e;
   	 }
    }
    /**
     * Проверка прав доступа к запрашиваемому ресурсу 
     * на уровне установленных привилегий
     * @param pageCode запрашиваемый ресурс
     * @param permCode запрашиваемая привилегия
     * @return  предоставить доступ/отказать
     * @throws Exception
     */
   public boolean accessPerm_(String pageCode, String permCode) throws Exception{
    	
    	try{
    //	 log.info("authenticator:accessPerm:pageCode:"+pageCode);
    //	 log.info("authenticator:accessPerm:permCode:"+permCode);
    // 	 log.info("authenticator:accessPerm:acApplication:"+linksMap.getAppCode());
    //	 log.info("authenticator:accessPerm:idUser:"+currentUser.getIdUser());
    	 List<AcRole> alist = entityManager.createQuery(
                 "select ar " +
                 "from AcUser au, AcRole ar, AcLinkUserToRoleToRaion aur, " +
                 "AcLinkRoleAppPagePrmssn arp, AcAppPage ap, AcPermissionsList aperm where " +
                 "aur.acRole is not null and aur.acRole.idRol=ar.idRol and " +
                 "aur.acUser is not null and aur.acUser.idUser=au.idUser and " +
                 "arp.acRole is not null and arp.acRole.idRol=ar.idRol and " +
                 "arp.acAppPage is not null and arp.acAppPage.idRes=ap.idRes and " +
                 "arp.acPermissionsList is not null and arp.acPermissionsList.idPerm=aperm.idPerm and " +
                 "ap.pageCode=:pageCode and " +
                 "aperm.idPerm=:idPerm and " +
                 "ap.acApplication=:acApplication and " +
                 "au.idUser=:idUser " )
                 .setParameter("pageCode", pageCode)
                 .setParameter("idPerm", new Long(permCode))
                 .setParameter("acApplication", linksMap.getAppCode())
                 .setParameter("idUser", currentUser.getIdUser())
                 .getResultList();
  
  //  	 log.info("authenticator:accessPerm:isEmpty:"+alist.isEmpty());
     	 if(alist.isEmpty()){
     		return false;
     	 }
    	}catch(Exception e){
    		 log.error("authenticator:access:error"+e);
    		// e.printStackTrace(System.out);
    		 throw e;
    	}
    	return true;
    }
   public boolean authenticate()
   {
	   
	   log.info("authenticator:authenticate:01");
	   
	   String tokenID=null;
	   
	   try{
		/* Context ctx=new InitialContext();
		  CUDAuthManagerLocal aml=(CUDAuthManagerLocal)ctx.lookup("cudAuthModule.CUDAuthManager.local");
		  AuthItem ai =aml.authCompleteItem(linksMap.getAppCode(), credentials.getUsername(), credentials.getPassword());
		 */ 
		   
		  String pTokenID = FacesContext.getCurrentInstance().getExternalContext()
		             .getRequestParameterMap()
		             .get("tokenID"); 
		  
		  String success = FacesContext.getCurrentInstance().getExternalContext()
		             .getRequestParameterMap()
		             .get("success"); 
		  
		  String welcome_form = FacesContext.getCurrentInstance().getExternalContext()
		             .getRequestParameterMap()
		             .get("welcome_form");
		  
		  log.info("authenticator:authenticate:pTokenID:"+pTokenID); 
		  log.info("authenticator:authenticate:success:"+success);
		  log.info("authenticator:authenticate:welcome_form:"+welcome_form);
		  
		  
		  if(welcome_form==null && (success==null||success.equals("false"))){
			  FacesMessages.instance().add("Пользователь не идентифицирован!");
			  return false;
		  }
		  
		  AccessServiceClient asc = (AccessServiceClient)Component.getInstance("asClient",ScopeType.EVENT);
		  
		  //if(pTokenID==null){
		  if(welcome_form!=null){ //через логин-пароль
		    try{
		    	
		    	if((credentials.getUsername()==null||credentials.getUsername().trim().equals(""))||
		    		(credentials.getPassword()==null||credentials.getPassword().trim().equals(""))){
		    		 FacesMessages.instance().add("Поля логин и пароль обязательны!");
					  return false;
		    	}
		    	
			   tokenID = asc.authenticate_login(credentials.getUsername(), credentials.getPassword());
		    }catch(InvalidCredentials e1){
			   log.info("authenticator:authenticate:02");
			   FacesMessages.instance().add("Пользователь не идентифицирован!");
			   return false;
	         }
		  }else{//через сертификат 
			   //pTokenID должен быть, так здесь мы только при условии success=true
			  tokenID = pTokenID;
		  }
		  
		  List<Role> roleList = asc.authorize(tokenID);
		  
		  if(roleList.isEmpty()){
			  log.info("authenticator:authenticate:03");
			  FacesMessages.instance().add("Нет прав доступа к системе!");
			  return false;
		  }
		  
		  List<String> roleStList = new ArrayList<String>();
		  List<String> rolesInfoList = new ArrayList<String>();
		  for(Role rl :roleList){
			  roleStList.add(rl.getIdRole());
			  rolesInfoList.add(rl.getName());
		  }
		  
		  Context ctx=new InitialContext();
		 // AutzManagerLocal aml=(AutzManagerLocal)ctx.lookup("cudAuthModule.AutzManager.local");
		  AutzManagerLocal aml=(AutzManagerLocal)ctx.lookup("java:global/CUDAuthModule/AutzManager!iac.cud.authmodule.session.AutzManagerLocal");
		  
		  AuthItem ai =aml.getAccessComplete(linksMap.getAppCode(), roleStList);
		 
		  if(ai==null){
			  log.info("authenticator:authenticate:04");
			  FacesMessages.instance().add("Ошибка доступа!");
			  return false;
		  }
		  Contexts.getSessionContext().set("authItem", ai);
		  
		  List<Attribute> attribList = asc.attrib(tokenID);
		  
		  String fio = null, org =null, tel = null, email = null, login = null, orgIOGVCode=null;
		  
		  for(Attribute at :attribList){
			  if(at.getName().equals("fio")){
				  fio=at.getValue();
			  }else if(at.getName().equals("org")){
				  org=at.getValue();
			  }else if(at.getName().equals("tel")){
				  tel=at.getValue();
			  }else if(at.getName().equals("email")){
				  email=at.getValue();
			  }else if(at.getName().equals("login")){
				  login=at.getValue();
			  }else if(at.getName().equals("orgIOGVCode")){
				  orgIOGVCode=at.getValue();
			  }
		  }
		  
		  AcUser currentUser = new AcUser();
		  
		  currentUser.setTokenID(tokenID);
		  
		  currentUser.setFio(fio);
		  currentUser.setOrgName(org);
		  currentUser.setPhone(tel);
		  currentUser.setEmail(email);
		  
		  currentUser.setRolesInfoList(rolesInfoList);
		  
		  if(accessPerm("0052","1")){
			  currentUser.setIsSysAdmin(1L);
		  }
		  
		  //временная мера
		  //в дальнейшем перейти на проверку наличия у пользователя определённой супер роли
		  Long idUser = (Long) entityManager
				  .createQuery("select au.idUser from AcUser au " +
				  		        "where au.login= :login")
				  .setParameter("login", login)		        
                  .getSingleResult();
				  ;
		  currentUser.setIdUser(idUser);
		  
		  //currentUser.setTokenID(pTokenID)
		  
		  Contexts.getSessionContext().set("currentUser", currentUser);
		  
		  try{
		    HttpSession session = (HttpSession)  FacesContext.getCurrentInstance().getExternalContext().getSession(false);
		    session.setAttribute("auditExportToken", tokenID);
		    }catch(Exception e){
		    	 log.error("authenticator:authenticate:session.setAttribute:Error:"+e);
		   	}
	
		  return true;
	   }catch(Exception e){
		 log.error("authenticator:authenticate:Error+:"+e);
      	 FacesMessages.instance().add("Ошибка доступа!");
         return false;
	   }
	}
   
   public void test(){
	   log.info("authenticator:test:!!!");
   }
   
   public void cudAuth() throws Exception{
   	try{
   	 log.info("authenticator:cudAuth:01");
   	 
   	 HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();

   //  String backUrl = "https://cudvm/infoscud/back.jsp";
     String backUrl = "http://cudvm/infoscud/public.seam";
	 String destination = "http://cudvm/CudServicesWeb/AccessServicesWebGeneral";
	// String destination = "http://cudvm/CudServicesWeb/AccessServicesWebLogin";
	 String pswitch = "false";
	 
     response.sendRedirect(destination+"?switch="+pswitch+"&backUrl="+backUrl);
  
   	}catch(Exception e){
   	 log.error("authenticator:cudAuth:error:"+e);
   		// e.printStackTrace(System.out);
   	  throw e;
   	}
    }
   
   public boolean authenticate_work()
    {
	   log.info("authenticator:authenticate_work:01");
	   try{
		  Context ctx=new InitialContext();
		  CUDAuthManagerLocal aml=(CUDAuthManagerLocal)ctx.lookup("cudAuthModule.CUDAuthManager.local");
		  AuthItem ai =aml.authCompleteItem(linksMap.getAppCode(), credentials.getUsername(), credentials.getPassword());
		  if(ai==null){
			  log.info("authenticator:authenticate_work:02");
			  FacesMessages.instance().add("Ошибка доступа!");
			  return false;
		  }
		  AcUser user = entityManager.find(AcUser.class, ai.getIdUser());
		 
		  Contexts.getSessionContext().set("authItem", ai);
		  
		  if(accessPerm("0052","1")){
			  user.setIsSysAdmin(1L);
		  }
		 /* 
		  entityManager.createQuery(
	               "select o from AcRole o where " +
	               "o.sign ")
	               .setParameter("login", credentials.getUsername())
	               .setParameter("password", credentials.getPassword())
	               .getSingleResult();*/
		  
		  Contexts.getSessionContext().set("currentUser", user);
		  return true;
	   }catch(Exception e){
		 log.error("authenticator:authenticate_work:Error:"+e);
       	 FacesMessages.instance().add("Ошибка доступа!");
         return false;
	   }
	}
 /*  
   public boolean authenticate_after_sso(String login, String password)
   {
	   log.info("authenticator:authenticate:01");
	   try{
		  Context ctx=new InitialContext();
		  AuthManagerLocal aml=(AuthManagerLocal)ctx.lookup("authModule.AuthManager.local");
		  AuthItem ai =aml.authCompleteItem(linksMap.getAppCode(), login, password);
		  if(ai==null){
			  log.info("authenticator:authenticate:02");
			  FacesMessages.instance().add("Ошибка доступа!");
			  return false;
		  }
		  AcUser user = entityManager.find(AcUser.class, ai.getIdUser());
		  Contexts.getSessionContext().set("authItem", ai);
		  Contexts.getSessionContext().set("currentUser", user);
		  return true;
	   }catch(Exception e){
		 log.error("authenticator:authenticate:Error:"+e);
      	 FacesMessages.instance().add("Ошибка доступа!");
        return false;
	   }
	}*/
 /**
   * Проведение аутентификации пользователя при входе в систему
   * @return предоставить доступ/отказать
   */
    public boolean authenticate_()
    {
      /*  log.info("authenticating {0}", credentials.getUsername());
        if ("admin".equals(credentials.getUsername()))
        {
            identity.addRole("admin");
            return true;
        }
        return false;*/
    	 try
         {
     	   log.info("auth_01");
     	   AcUser user = (AcUser) entityManager.createQuery(
               "select au from AcUser au where " +
               "au.login = :login and au.password = :password and " +
               "(au.start is null or au.start <= sysdate) and (au.finish is null or au.finish > sysdate) ")
               .setParameter("login", credentials.getUsername())
               .setParameter("password", credentials.getPassword())
               .getSingleResult();
     	//   user.setShortOrgName(user.getIdOrg().getFullName());
     
     	//  identity.

      Contexts.getSessionContext().set("currentUser", user);
       
   /*   if(user.getLinksUserToRolesCollection2()!=null && user.getLinksUserToRolesCollection2().size()!=0){
     	
     	 Contexts.getSessionContext().set("roleUser", user.getLinksUserToRolesCollection2().get(0).getIdRole().getRoleTitle());
       }else{
     	
      	 FacesMessages.instance().add("У пользователя нет ни одной роли!");
       	 return false;
      }*/
            return true;
         }
         catch (NoResultException ex)
         {
         	log.error("auth_NoResultException");
        	FacesMessages.instance().add("Не правильный логин или пароль!!!");
            return false;
         }
         catch (Exception e)
         {
         	log.error("auth_Exception:"+e);
         	 FacesMessages.instance().add("Ошибка доступа!");
            return false;
         }

    }
    
 /*   @In Identity identity;
  
    public boolean internalAuthenticate(Principal principal, List<String> roles)
    {
    	System.out.println("!!!authenticate!!!");
    	
    	
    	
    	
        if ((principal instanceof SeamSamlPrincipal))
        {
          SeamSamlPrincipal samlPrincipal = (SeamSamlPrincipal)principal;
          
          
          
          
          System.out.println("!!!authenticate:login:"+samlPrincipal.getName());
             
          
          authenticate_after_sso(samlPrincipal.getName(), "111");
          
          if (samlPrincipal.getName().equals("employee"))
          {
            return Boolean.valueOf(false);
          }

          for (AttributeType attribute : samlPrincipal.getAttributes())
          {
            if (attribute.getName().equals("role"))
            {
              List value = attribute.getAttributeValue();
              if ((value != null) && (value.size() > 0))
              {
                roles.add((String)value.get(0));
              }
            }
          }

          return Boolean.valueOf(true);
        }

        return Boolean.valueOf(true);
     }*/
    
    public String localLogout()
    {
       log.info("localLogout");
       Identity.instance().logout();
       
       try{
    	   AccessServiceClient asc = (AccessServiceClient)Component.getInstance("asClient",ScopeType.EVENT);
     	   asc.logout(currentUser.getTokenID());
       }catch(Exception e){
    	   log.error("localLogoutError:"+e);
       }
       
       return "loggedOut";
    }
    
/*
 select AR.ROLE_TITLE, AUR.ID_RAION, ARD.ID_PERM   
from ac_users au, ac_roles ar, 
       AC_LINK_USER_TO_ROLE_TO_RAIONS aur, AC_LINK_ROLE_APP_DOMEN_PRMSSNS ard,
       AC_APP_DOMAINS ad
where AU.ID_USER=4 and AUR.ID_ROLE= AR.ID_ROLE 
    and AUR.ID_USER=AU.ID_USER and ARD.ID_ROLE=AR.ID_ROLE
     and ARD.ID_DOMEN=AD.ID_DOMEN and AD.PAGE_CODE='003'
     and AD.APP_CODE=24
 */
}
